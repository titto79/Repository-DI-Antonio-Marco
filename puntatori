#include <stdio.h>
#include <stdlib.h>

int main(void) {
    // 1) Puntatore a intero
    int x = 42;
    int *p = &x;           // p punta a x

    printf("Valore di x tramite p: %d\n", *p); // dereferenziazione

    // 2) Modifica via puntatore
    *p = 100;
    printf("x modificato: %d\n", x);

    // 3) Array e pointer arithmetic
    int *arr = malloc(5 * sizeof *arr);  // allocazione dinamica
    if (!arr) return 1;
    for (int i = 0; i < 5; i++) {
        arr[i] = i * 10;    // equivalente a *(arr + i) = i*10
    }
    printf("Array dinamico: ");
    for (int i = 0; i < 5; i++) {
        printf("%d ", *(arr + i));
    }
    printf("\n");

    // 4) Puntatore a puntatore
    int **pp = &p;
    **pp = 200;            // modifica indiretta di x
    printf("x dopo **pp = %d\n", x);

    free(arr);             // rilascio memoria
    return 0;
}
--------------------------------esercizio---------------------------
#include <stdio.h>

int main() {
    // dichiaro delle variabili di tipo Int
    int a, b, temp;
    // dichiaro dei puntatori (i puntatori si dichiarano con * davanti al nome_variabile)
    int *puntatore1,*puntatore2;

    // 1. Inserimento valori
    printf("Inserisci il primo numero: ");
    scanf("%d", &a);

    printf("Inserisci il secondo numero: ");
    scanf("%d", &b);

    // 2. Puntatori
    // associo i puntatori1 e 2 alle variabili a e b (per l'associazione si usa &)
    puntatore1 = &a;
    puntatore2 = &b;

    // 3. Stampa valori prima dello scambio
    printf("Prima dello scambio: a = %d, b = %d\n", a, b);

    // Scambio valori tramite puntatori
    // temp è una semplice variabile in cui poggiamo il valore scaturito dall'associazione precedente
    // poggiamo il valore risultante nella memoria (*puntatore1) 
    temp = *puntatore1;
    // ora mettimo nel puntatore1 il contenuto del puntatore2
    *puntatore1 = *puntatore2;
    //ora porto il valore poggiato in temp nel puntatore2
    *puntatore2 = temp;

    // 4. Stampa valori dopo lo scambio
    printf("Dopo lo scambio: a = %d, b = %d\n", a, b);

    // 5. Calcola la somma usando i puntatori
    int somma = *puntatore1 + *puntatore2;
    printf("La somma dei due numeri (dopo lo scambio) è: %d\n", somma);

    // 6. Determina il maggiore usando i puntatori
    if (*puntatore1 > *puntatore2) {
        printf("Il maggiore è: %d\n", *puntatore1);
    } else if (*puntatore1 < *puntatore2) {
        printf("Il maggiore è: %d\n", *puntatore2);
    } else {
        printf("I numeri sono uguali.\n");
    }

    return 0;
}
-----------------------------esercizio 2--------------------------
#include <stdio.h>
 #include <stdlib.h>
 int main(void) {
     // 1) Puntatore a intero
    int x = 42;
    int *p = &x;           // p punta a x
     printf("Valore di x tramite p: %d\n", *p); // dereferenziazione
 
     // 2) Modifica via puntatore
     *p = 100;
     printf("x modificato: %d\n", x);
 
     // 3) Array e pointer arithmetic
     int *arr = malloc(5 * sizeof *arr);  // allocazione dinamica
     if (!arr) return 1;
     for (int i = 0; i < 5; i++) {
        arr[i] = i * 10;    // equivalente a *(arr + i) = i*10
     }
     printf("Array dinamico: ");
     for (int i = 0; i < 5; i++) {
         printf("%d ", *(arr + i));
     }
     printf("\n");
 
     // 4) Puntatore a puntatore
     int **pp = &p;
     **pp = 200;            // modifica indiretta di x
    printf("x dopo **pp = %d\n", x);

free(arr);             // rilascio memoria
return 0;
 } 
-------------------------------esercizio 3-------
#include <stdio.h>

 void incrementa(int *ptr) {
     // Modifica il valore della variabile passata per riferimento
     (*ptr)++;
 }
 
 int main(void) {
     int x = 10;
 
     // 1) Ottengo l'indirizzo di x con &
     int *p = &x;  
     printf("Valore di x prima: %d\n", x);
 
     // 2) Passaggio dell'indirizzo di x alla funzione
     incrementa(&x);  

     printf("Valore di x dopo incrementa(&x): %d\n", x);
 
     // 3) Uso di p (che già contiene &x)
     *p = *p + 5;  

     printf("Valore di x dopo *p = *p + 5: %d\n", x);
 
     return 0;
 }
