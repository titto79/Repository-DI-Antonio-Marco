#include <stdio.h>
#include <string.h>

int main(void) {
    // 1) Dichiarazione e inizializzazione di un array di interi
    int v[5] = {10, 20, 30, 40, 50};

    // 2) Calcolo della dimensione (numero di elementi)
    //size_t viene utilizzato per mettere in una variabile il peso in bit di un file,array...
    size_t n = sizeof(v) / sizeof(v[0]);

    // 3) Accesso e stampa di tutti gli elementi
    printf("Contenuto dell'array:\n");
    for (size_t i = 0; i < n; i++) {
        printf("v[%zu] = %d\n", i, v[i]);
    }

    // 4) Modifica di un elemento
    v[2] = 99;  // cambia il terzo elemento (precedentemente 30) in 99

    // 5) Uso di memcpy per copiare l'array in uno nuovo
    int copia[5];
    memcpy(copia, v, sizeof(v)); // include <string.h> per memcpy

    printf("\nArray dopo modifica e copia:\n");
    for (size_t i = 0; i < n; i++) {
        printf("copia[%zu] = %d\n", i, copia[i]);
    }

    return 0;
}
-------------INIZIALIZZATORI------------------
#include <stdio.h>

struct Punto {
    int x;
    int y;
};

int main(void) {
    // 1) Inizializzazione di variabili semplici
    int a = 10;                  // a = 10
    float f = 3.5f;              // f = 3.5

    // 2) Array completamente inizializzato
    int arr1[5] = {1, 2, 3, 4, 5};

    // 3) Array parzialmente inizializzato
    int arr2[5] = {1, 2};        // arr2 = {1,2,0,0,0}

    // 4) Dimensione dedotta
    char msg[] = "Ciao";         // msg ha 5+1=5 caratteri compreso '\0'

    // 5) Struttura con designated initializers
    struct Punto p = { .y = 20, .x = 10 }; // ordine esplicito dei campi

    // 6) Stampa dei valori
    printf("a=%d, f=%.1f\n", a, f);
    printf("arr1: ");
    for(int i=0; i<5; i++) printf("%d ", arr1[i]);
    printf("\narr2: ");
    for(int i=0; i<5; i++) printf("%d ", arr2[i]);
    printf("\nmsg: %s\n", msg);
    printf("Punto p: (%d, %d)\n", p.x, p.y);

    return 0;
}
-------------------PUNTATORI--------------------
#include <stdio.h>
#include <stdlib.h>

int main(void) {
    // 1) Puntatore a intero
    int x = 42;
    int *p = &x;           // p punta a x

    printf("Valore di x tramite p: %d\n", *p); // dereferenziazione

    // 2) Modifica via puntatore
    *p = 100;
    printf("x modificato: %d\n", x);

    // 3) Array e pointer arithmetic
    int *arr = malloc(5 * sizeof *arr);  // allocazione dinamica
    if (!arr) return 1;
    for (int i = 0; i < 5; i++) {
        arr[i] = i * 10;    // equivalente a *(arr + i) = i*10
    }
    printf("Array dinamico: ");
    for (int i = 0; i < 5; i++) {
        printf("%d ", *(arr + i));
    }
    printf("\n");

    // 4) Puntatore a puntatore
    int **pp = &p;
    **pp = 200;            // modifica indiretta di x
    printf("x dopo **pp = %d\n", x);

    free(arr);             // rilascio memoria
    return 0;
}
